How does it work with concurrency?

1. All parts do their one-time initialisation. This happens with
    interrupts disabled so that no interrupts arrive before all 
    subsystems are initialised.

2. Interrupts are enabled.

3. The main loop periodically (actually quite often) calls the loop
    function of every module.

4. The loop function can do whatever it wants, but it must not take excessively long
    (total time must be < 10ms) otherwise we might miss some events

5. Interrupts themselves should be fairly quick, as you'd expect

6. If we need to examine data from an interrupt, it needs to be in volatile variable,
    which is ok, but we can't read a variable atomically unless it's a 
    single byte, so

    If we need to get a consistent copy of anything, copy it with interrupts
    temporarily disable.

7. A timer tick function keeps incrementing master_state.tickcount

   All the modules can check this and do what they want.

8. If, for any reason, we want to shut everything off and save power,
    e.g. low battery condition, we could just turn off all the hardware
    and then sleep the cpu. 

Power saving is not really important, according to the datasheet the mcu uses about
10ma "fully on" which means it's about the same as a LED.


